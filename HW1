public class Homework1 {

    public static void main(String[] args) {

        convert(10);
        System.out.println(normalize(721));
        System.out.println(max(10, 12, -14));
        System.out.println(fact(12));
        System.out.println(fact(BigInteger.valueOf(30)));
        multiplTable();
        System.out.println(average(1, 2, 3, 4, 5, 6, 7));
        System.out.println(isMagicSquare(new int[][]{{16, 3, 2, 13}, {5, 10, 11, 8}, {9, 6, 7, 12}, {4, 15, 14, 1}}));
        System.out.println(Arrays.toString(reverse(new int[]{1, 2, 3})));
        System.out.println(Arrays.toString(sort(new int[]{2, 1, 45, 34, 12, 2})));
        System.out.println(Arrays.toString(removeExtra(new int[]{2, 1, 45, 2, 34, 1, 12, 2}, 2)));
    }

    // task 1
    static void convert(int arg) {
        if (arg >= 0) {
            String a = Integer.toString(arg, 2);
            String b = Integer.toString(arg, 8);
            String c = Integer.toString(arg, 16);
            System.out.println(a);
            System.out.println(b);
            System.out.println(c);
        }else{
            int n = -arg;
            String a = Integer.toString(arg, 2);
            String b = Integer.toString(arg, 8);
            String c = Integer.toString(arg, 16);
            System.out.println(a);
            System.out.println(b);
            System.out.println(c);
        }
    }


    // task 2
    static int normalize(int angle) {
        int n = angle % 360;
        if (n < 0){
            n = 360 + n;
        }
        return n;
    }


    // task 3
    static int max(int x, int y, int z) {
        int n = Math.max(x, y);
        n = Math.max(n, z);
        System.out.println(n);
        return 0;
    }


    // task 4
    static int fact(int n) {
        if (n == 1) {
            return 1;
        } else {
            return n * fact(n - 1);
        }
    }


    // task 5
    static BigInteger fact(BigInteger n) {
        if (n.equals(BigInteger.ONE)) { //equals о же самое что и =, если н равно один - вернуть н
            return n;
        }
        return n.multiply(fact(n.subtract(BigInteger.ONE))); // multiply = *
    }

    // task 6
    static void multiplTable() {
        for (int i = 0; i <= 10; i++){
            for (int j = 0; j <= 10; j++){
                int p = i * j;
                System.out.println(i+"*"+j+"="+p);
            }
        }
    }


    // task 7
    static int average(int... nums) {
        return Arrays.stream(nums).sum()/nums.length;
        return 0;
    }


    // task 8
    static boolean isMagicSquare(int[][] square) {
        int len = square[0].length;
        int d1 = 0, d2 = 0;
        for (int i = 0; i < len; i++){
            d1 += square[i][i];
            d2 += square[i][len- i - 1];
        }
        if (d1 != d2){
            return false;
        }
        for (int i = 0; i < len; i++){
            int str = 0, stl = 0;
            for (int j = 0; j < len; j++){
                str += square[i][j];
                stl += square[j][i];
            }
            if (str != d1 || stl != d2){
                return false;
            }
        }
        return true;
    }


    // task 9
    static int[] reverse(int[] arr) {
        for(int i = arr.length - 1; i >= 0; i--){
            System.out.println(arr[i]);
        }
    }


    // task 10
    static int[] sort(int[] arr) {
        for (int i = 0; i < arr.length-1; i++){
            for (int j = i + 1; j < arr.length; j++){
                if (arr[i]>arr[j]){
                    int a = arr[i];
                    arr[i]=arr[j];
                    arr[j]=a;
                }
            }
        }
        for (int t: arr){
            System.out.println(t);
        }
        return null;
    }


    // task 11
    static int[] removeExtra(int[] arr, int n) {
        return Arrays.stream(arr).filter(i -> i != n).toArray();
        return null;
    }
}
